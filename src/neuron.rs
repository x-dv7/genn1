
pub use super::base::*;
use rand::Rng;
use std::borrow::BorrowMut;
//use std::io::Read;
use std::sync::{Arc, Weak, RwLock};
use std::cell::RefCell;
use std::collections::{HashMap,HashSet};

/// NEAT —Å–µ—Ç—å, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–¥—Å–µ—Ç–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–æ–π–Ω–æ
#[derive(Deserialize, Serialize, Debug)]
pub struct Nets {
    pub max_node: RwLock<NodeIndex>,
    //pub nodes: RwLock<HashSet<NodeIndex>>,//65536 —É–∑–ª–æ–≤
    pub max_link: RwLock<LinkIndex>,
    //pub links: RwLock<HashSet<LinkIndex>>,//4 –º–ª—Ä–¥ —Å–≤—è–∑–µ–π
    pub layers: RwLock<Vec<DenseNet>>,//–≤—Å–µ —Å–µ—Ç–∏ 
}

impl Nets {
    pub fn new() -> Arc<Self> {
        Arc::new(
        Nets {
            max_node: RwLock::new(0),
            //nodes: RwLock::new(HashSet::new()),
            max_link: RwLock::new(0),
            //links: RwLock::new(HashSet::new()),
            layers: RwLock::new(Vec::new()),
        })
    }
}

/// –ü–æ–ª–Ω–æ—Å–≤—è–∑–∞–Ω–Ω–∞—è –ø–æ–¥—Å–µ—Ç—å
#[derive(Deserialize, Serialize, Debug)]
pub struct DenseNet {
    pub parent_net: Weak<Nets>,//—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é NEAT-—Å–µ—Ç—å
    pub nodes: HashMap<NodeIndex, DenseNode>,//—É–∑–ª—ã –ø–æ–¥—Å–µ—Ç–∏
    pub links: HashMap<LinkIndex, NodesLink>,//—Å–≤—è–∑–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
}

impl DenseNet {
    pub fn new(parent: Arc<Nets>) -> Self {
        DenseNet {
            parent_net: Arc::downgrade(&parent),
            nodes: HashMap::new(),
            links: HashMap::new(),
        }
    }

    /// –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É–∑–µ–ª (–¥–ª—è –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞ –ø–∏—à–µ–º id = 0)
    pub fn ins_node(&mut self, id: NodeIndex, node_type: NodeType, activation: Activation) -> NodeIndex {
        let mut lv_max_node: NodeIndex = 0;
        let lo_dense_net = Arc::new(*self);//—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ–±—è –∫–∞–∫ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
        if id == 0 {
            // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª. id —É–∫–∞–∑—ã–≤–∞–µ–º = 0. –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º max_node
            if let Some(parent) = self.parent_net.upgrade() {
                if let Ok(max_node) = parent.max_node.write() {
                    *max_node += 1;
                    lv_max_node = *max_node;
                    let lo_net = DenseNode::new(lv_max_node, lo_dense_net, node_type, activation);
                    self.nodes.insert(lv_max_node, lo_net); 
                }
            } 
            lv_max_node
        }
        else 
        if let Some(_nid) = self.nodes.iter().find(|nid| *nid.0 == id) {
            //—Ç–∞–∫–æ–π —É–∑–µ–ª —É–∂–µ –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0;
            0
        } else  {
            //—Ç–∞–∫–æ–≥–æ —É–∑–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º NodeId
            if let Some(parent) = self.parent_net.upgrade() {
                if let Ok(max_node) = parent.max_node.write() {
                    if *max_node < id {*max_node = id};
                    lv_max_node = id;
                    

                }
            }
            if self.max_node.index() < id.index() { self.max_node = id };
            let n = Arc::new(RwLock::new(Node::new(id, node_type, activation)));
            self.nodes.insert(id, Arc::clone(&n));  
            id  
        }
    }
}
    // /// —Å–≤—è–∑–∞—Ç—å —É–∑–ª—ã (src - –æ—Ç–∫—É–¥–∞, dst - –∫—É–¥–∞). –ø–µ—Ä–µ–¥ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ–º –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!
    // pub fn link_nodes(&mut self, src: NodeId, dst: NodeId, weight: f32, enabled: bool) -> LinkId {
    //     //–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º max_link
    //     self.max_link = LinkId::new(self.max_link.index() + 1);
    //     //—Å–æ–∑–¥–∞–¥–∏–º —Å–≤—è–∑—å
    //     let lo_link = NodesLink::new(self.max_link, src, dst, weight, enabled);
    //     self.links.insert(self.max_link, Arc::new(RwLock::new(lo_link)));
    //     self.max_link
    // }

    // /// –ø—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–Ω–æ –ª–∏ —Å–≤—è–∑–∞—Ç—å —É–∑–ª—ã (—Ç–∞–∫–∏–µ —É–∑–ª—ã –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –Ω–∏–º–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)
    // pub fn check_before_link_nodes(&self, src: NodeId, dst: NodeId) -> bool {
    //     //—Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º —ç—Ç–∏ —É–∑–ª—ã
    //     if let Some(_src) = self.nodes.iter().find(|n_id| n_id.0.index() == src.index()) {
    //         if let Some(_dst) = self.nodes.iter().find(|n_id| n_id.0.index() == dst.index()) {
    //             //–ø—Ä–æ–≤–µ—Ä–∏–º, –≤–¥—Ä—É–≥ —Ç–∞–∫–∞—è —Å–≤—è–∑—å —É–∂–µ –µ—Å—Ç—å:
    //             //1) –≤ –∏—Å—Ö. —Å–≤—è–∑—è—Ö src —É–∑–ª–∞ –∏—â–µ–º —Å—Å—ã–ª–∞–µ—Ç—Å—è –ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ —Å–≤—è–∑—å –Ω–∞ dst
    //             let mut lv_res = false;
    //             if let Ok(s) = _src.1.read() {
    //                 if let Some(lo_link) = s.outgoing.iter().find(|l_id|{
    //                     if let Some(u) = l_id.upgrade() {
    //                         if let Ok(r) = u.read() {
    //                             if r.dst.index() == dst.index() {lv_res = true}
    //                         }
    //                     }
    //                     lv_res
    //                 }) {return false;};
    //             };
    //             if let Ok(s) = _dst.1.read() {
    //                 let r = s.incoming.iter().find(predicate)
    //             };
    //             //let r = _dst.1.try_read().ok().unwrap_or_default().outgoing.iter().unzip()
    //             //
    //             //s.incoming.iter().find(|n_id| {            
    //                 // if let Some(u) = *n_id.upgrade() {
    //                 //     if let Ok(r) = u.read() {
    //                 //         if r.id != link_id {true} else {false}
    //                 //     }
    //                 //     else {true}//—Å–æ—Ö—Ä–∞–Ω—è–µ–º
    //                 // }
    //                 // else { true }//—Å–æ—Ö—Ä–∞–Ω—è–µ–º
    //             //});
    //             //self.links.iter().find()
    //         }
            
    //     }
    //     true
    // }

    // /// –°–æ–µ–¥–∏–Ω—è–µ–º src/dst —É–∑–ª—ã
    // pub fn link_nodes(&self, nodes: &mut [Node]) {
    //     //nodes.get_mut(self.src.index()).map(|x| x.add_outgoing(self.id));
    //     nodes.get_mut(self.dst.index()).map(|x| x.add_incoming(self));
    // }

    // /// Enable edge and link the nodes.
    // pub fn enable(&mut self, nodes: &mut [Node]) {
    //     if self.enabled {
    //         // already active, nothing to do.
    //         return;
    //     }
    //     self.enabled = true;
    //     //nodes.get_mut(self.src.index()).map(|x| x.add_outgoing(self.id));
    //     // For dst node, just re-enable the weight.
    //     // This allows for faster forward propagation.
    //     nodes.get_mut(self.dst.index()).map(|x| x.update_incoming(self, self.weight));
    // }

    // /// Disable edge and unlink the nodes.
    // pub fn disable(&mut self, nodes: &mut [Node]) {
    //     self.enabled = false;
    //     //nodes.get_mut(self.src.index()).map(|x| x.remove_outgoing(self.id));
    //     // For dst node, just set the weight to zero.
    //     // This allows for faster forward propagation.
    //     nodes.get_mut(self.dst.index()).map(|x| x.update_incoming(self, 0.0));
    // }

// }

/// Node - —É–∑–µ–ª —Å–µ—Ç–∏
#[derive(Deserialize, Serialize, Debug)]
pub struct DenseNode {
    pub id: NodeIndex,//–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å —É–∑–ª–∞
    //outgoing: Vec<Weak<RwLock<NodesLink>>>,//—Å–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π —Å–º–æ—Ç—Ä—è—â–∏—Ö –∏–∑ —É–∑–ª–∞
    parent_net: Weak<DenseNet>,//—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–æ–¥—Å–µ—Ç—å
    incoming: Vec<LinkIndex>,//—Å–≤—è–∑–∏, —Å–º–æ—Ç—Ä—è—â–∏–µ –Ω–∞ —É–∑–µ–ª (–∏–Ω–¥–µ–∫—Å—ã —Å–≤—è–∑–µ–π –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–¥—Å–µ—Ç–∏ DenseNet.links)
    activation: Activation,//—Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    pub node_type: NodeType,//—Ç–∏–ø —É–∑–ª–∞
    pub activated_value: f32,//–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    //pub deactivated_value: f32,
    pub current_state: f32,//–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    //pub previous_state: f32,
    //pub error: f32,//–æ—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    pub bias: f32,//—Å–º–µ—â–µ–Ω–∏–µ
    pub enabled: bool,//–≤–∫–ª—é—á–µ–Ω?
}

impl DenseNode {
    pub fn new(id: NodeIndex, parent: Arc<DenseNet>, node_type: NodeType, activation: Activation) -> Self {
        DenseNode {
            id,
            //outgoing: Vec::new(),
            parent_net: Arc::downgrade(&parent),
            incoming: Vec::new(),
            activation,
            node_type,
            activated_value: 0.0,
            //deactivated_value: 0.0,
            current_state: 0.0,
            //previous_state: 0.0,
            //error: 0.0,
            bias: rand::thread_rng().gen::<f32>(),
            enabled: true,
        }
    }

    /// –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –Ω–∞ –Ω–∞—Å
    pub fn add_incoming(&mut self, link: LinkIndex) {
        self.incoming.push(link);
    }

    // /// –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –æ—Ç –Ω–∞—Å
    // pub fn add_outgoing(&mut self, link: Arc<RwLock<NodesLink>>) {
    //     self.outgoing.push(Arc::downgrade(&link));
    // }
    
    /// –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å –Ω–∞ –Ω–∞—Å
    pub fn update_incoming(&mut self, link: &NodesLink, weight: f32) {
        if let Some(link) = self.incoming.iter_mut().find(|x| x.id == link.id) {
            link.weight = weight;
        }
    }

    /// —É–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –Ω–∞ –Ω–∞—Å
    pub fn remove_incoming(&mut self, link_id: LinkIndex) {
        //–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ, —á—Ç–æ true
        self.incoming.retain(|x| x.id != link_id );
    }
    /// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π.
    pub fn incoming_edges(&self) -> &[NodesLink] {
        &self.incoming
    }

    /// ùúé(Œ£(w * i) + b)
    /// –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ current_state
    #[inline]
    pub fn activate(&mut self) {
        if self.activation != Activation::Softmax {
            self.activated_value = self.activation.activate(self.current_state);
        }
    }

    /// –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π —É–∑–ª–∞
    #[inline]
    pub fn reset_node(&mut self) {
        //self.error = 0.0;
        self.activated_value = 0.0;
        self.current_state = 0.0;
    }

    /// –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∑–ª–∞
    #[inline]
    pub fn clone_with_values(&self) -> Self {
        DenseNode {
            id: self.id,
            //outgoing: self.outgoing.clone(),
            incoming: self.incoming.clone(),
            current_state: self.current_state.clone(),
            //previous_state: self.previous_state.clone(),
            activated_value: self.activated_value.clone(),
            //error: self.error.clone(),
            bias: self.bias.clone(),
            activation: self.activation.clone(),
            node_type: self.node_type.clone(),
            enabled: self.enabled.clone()
        }
    }
}

impl Clone for DenseNode {
    fn clone(&self) -> Self { 
        DenseNode {
            id: self.id,
            //outgoing: self.outgoing.clone(),
            incoming: self.incoming.clone(),
            current_state: 0.0,
            //previous_state: 0.0,
            activated_value: 0.0,
            //deactivated_value: 0.0,
            //error: 0.0,
            bias: self.bias.clone(),
            activation: self.activation.clone(),
            node_type: self.node_type.clone(),
            enabled: self.enabled.clone()
        }
    }
}

/// Link - —Å–≤—è–∑—å –º–µ–∂–¥—É 2-–º—è —É–∑–ª–∞–º–∏ —Å–µ—Ç–∏, –Ω–∞—Ö–æ–¥—è—â–∞—è—Å—è –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ —Å–≤—è–∑–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Node
#[derive(Deserialize, Serialize, Debug, Clone)]
pub struct NodesLink {
    pub id: LinkIndex,//–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å —Å–≤—è–∑–∏
    pub src: NodeIndex,//–æ—Ç–∫—É–¥–∞ —Å–≤—è–∑—å
    pub dst: NodeIndex,//–∫—É–¥–∞ —Å–≤—è–∑—å
    pub weight: f32,//–≤–µ—Å —Å–≤—è–∑–∏
    pub enabled: bool,//–≤–∫–ª—é—á–µ–Ω–∞?
}

impl NodesLink {
    pub fn new(id: LinkIndex, src: NodeIndex, dst: NodeIndex, weight: f32, enabled: bool) -> Self {
        NodesLink {
            id,
            src,
            dst,
            weight,
            enabled
        }
    }

    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞ —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –¥–µ–ª—å—Ç—É
    #[inline]
    pub fn update(&mut self, delta: f32/*, nodes: &mut [Node]*/) {
        self.update_weight(self.weight + delta/*, nodes*/);
    }

    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤–µ—Å–∞
    pub fn update_weight(&mut self, weight: f32 /*, nodes: &mut [Node]*/) {
        self.weight = weight;
        //–Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∫—É—Å–æ–∫ –∫–æ–¥–∞!!!
        //nodes.get_mut(self.dst.index()).map(|x| x.update_incoming(self, weight));
    }
    
    /// –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ (w * i), –≥–¥–µ i - –≤—Ö.–∑–Ω–∞—á–µ–Ω–∏–µ
    #[inline]
    pub fn calculate(&self, i_val: f32) -> f32 {
        self.weight * i_val //(w * i)
    }
}

// /// SymbolLink - –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É 2-–º—è —É–∑–ª–∞–º–∏ —Å–µ—Ç–∏, –Ω–∞—Ö–æ–¥—è—â–∞—è—Å—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ Node.
// /// –°–¥–µ–ª–∞–Ω–æ —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–µ –ª–µ–ø–∏—Ç—å —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏, –∞ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–≤—è–∑—å –ø–æ –µ—ë –∏–Ω–¥–µ–∫—Å—É
// #[derive(Deserialize, Serialize, Debug, Clone)]
// pub struct SymbolLink {
//     pub id: LinkIndex,//–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å —Å–≤—è–∑–∏
//     pub src: NodeIndex,//–∏–Ω–¥–µ–∫—Å —É–∑–ª–∞, –æ—Ç–∫—É–¥–∞ –∏–¥–µ—Ç —Å–≤—è–∑—å
//     pub weight: f32,//–≤–µ—Å —Å–≤—è–∑–∏
// }

// impl SymbolLink {
//     pub fn new(link: &NodesLink) -> Self {
//         Self {
//             id: link.id,
//             src: link.src,
//             weight: link.weight,
//         }
//     }
// }